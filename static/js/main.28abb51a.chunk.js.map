{"version":3,"sources":["components/error message/index.tsx","components/spinner/index.tsx","interpreter/parser.ts","interpreter/inputReader.ts","interpreter/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ErrorMessage","forwardRef","props","ref","className","otherProps","children","Spinner","validChars","InputReader","input","values","pointer","this","Array","length","i","charCodeAt","Interpreter","code","tokens","reader","memory","memorySize","fill","memoryPointer","codePointer","loopStack","output","accumulator","move","add","halted","split","filter","char","includes","bracket","forEach","token","Error","lex","currentToken","nextToken","Math","max","min","read","String","fromCharCode","push","newPointer","pop","Promise","resolve","setTimeout","stepSize","step","App","useState","setOutput","loading","setLoading","loadingRef","useRef","current","codeRef","inputRef","interpreterRef","onClick","useCallback","a","halt","value","interpreter","time","performance","now","run","then","text","error","catch","message","href","target","disabled","rows","spellCheck","Output","style","fontFamily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28abb51a.chunk.js","sourcesContent":["\r\nimport React, { forwardRef } from 'react';\r\n\r\nimport './style.css';\r\n\r\nconst ErrorMessage = forwardRef<HTMLSpanElement, React.HTMLProps<HTMLSpanElement>>((props, ref) => {\r\n    const { className, ...otherProps } = props;\r\n\r\n    return (\r\n        <span ref={ref} className={`${className || ''} error-message`} {...otherProps}>\r\n            {props.children}\r\n        </span>\r\n    );\r\n});\r\n\r\nexport default ErrorMessage;\r\n","\r\nimport React from 'react';\r\n\r\nimport './style.css';\r\n\r\nconst Spinner: React.FC = () => {\r\n    return <div className=\"loading-spinner\" />;\r\n};\r\n\r\nexport default Spinner;\r\n","\r\n/**valid chars */\r\nconst validChars = [\r\n    '>',\r\n    '<',\r\n    '+',\r\n    '-',\r\n    '[',\r\n    ']',\r\n    ',',\r\n    '.'\r\n] as const;\r\n\r\n/**character */\r\nexport type token = (typeof validChars)[number];\r\n\r\n/**\r\n * tokenize brainfuck code\r\n * @param code brainfuck code\r\n * @returns tokens\r\n */\r\nexport default function lex(code: string): token[] {\r\n    // @ts-ignore\r\n    const tokens: token[] = code\r\n        .split('')\r\n        .filter(char => (validChars as readonly string[]).includes(char));\r\n\r\n    let bracket = 0;\r\n    tokens.forEach(token => {\r\n        if (token === '[') {\r\n            ++bracket;\r\n        } else if (token === ']') {\r\n            --bracket;\r\n        }\r\n\r\n        if (bracket < 0)\r\n            throw Error('unexpected \\']\\'');\r\n    });\r\n\r\n    if (bracket > 0)\r\n        throw Error('unexpected \\'[\\'');\r\n\r\n    return tokens;\r\n}\r\n\r\n\r\n","\r\nexport default class InputReader {\r\n    public readonly values: number[];\r\n    private pointer: number = 0;\r\n\r\n    public constructor(input: string) {\r\n        this.values = new Array(input.length);\r\n\r\n        for (let i = 0; i < input.length; ++i) {\r\n            this.values[i] = input.charCodeAt(i) & 255;\r\n        }\r\n    }\r\n\r\n    public read(): number {\r\n        if (this.pointer < this.values.length) {\r\n            return this.values[this.pointer++];\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n","\r\nimport lex, { token } from './parser';\r\nimport InputReader from './inputReader';\r\n\r\nexport default class Interpreter {\r\n    /**memory size */\r\n    private static readonly memorySize = 30000;\r\n\r\n    /**step size per iteration */\r\n    private static readonly stepSize = 20;\r\n\r\n    /**splitted tokens */\r\n    private readonly tokens: token[];\r\n    /**input reader */\r\n    private readonly reader: InputReader;\r\n\r\n    /**memory */\r\n    private readonly memory: number[] = new Array(Interpreter.memorySize).fill(0);\r\n\r\n    /**memory pointer */\r\n    private memoryPointer: number = 0;\r\n\r\n    /**code pointer */\r\n    private codePointer: number = 0;\r\n    \r\n    private loopStack: number[] = [];\r\n\r\n    /**output string */\r\n    private output: string = '';\r\n\r\n    private accumulator: {\r\n        move: number;\r\n        add: number;\r\n    } = {\r\n        move: 0,\r\n        add: 0\r\n    }\r\n\r\n    private halted: boolean = false;\r\n\r\n    public constructor(code: string, input: string) {\r\n        this.tokens = lex(code);\r\n        this.reader = new InputReader(input);\r\n    }\r\n\r\n    private get currentToken(): token | undefined {\r\n        if (this.codePointer < this.tokens.length) {\r\n            return this.tokens[this.codePointer];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    private get nextToken(): token | undefined {\r\n        if (this.codePointer + 1 < this.tokens.length) {\r\n            return this.tokens[this.codePointer + 1];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    private step(): void {\r\n        const currentToken = this.currentToken,\r\n            nextToken = this.nextToken;\r\n\r\n        switch (currentToken) {\r\n            case '>':\r\n            case '<':\r\n                this.accumulator.move += currentToken === '>' ? 1 : -1;\r\n\r\n                if (nextToken !== '>' && nextToken !== '<') {\r\n                    this.memoryPointer += this.accumulator.move;\r\n                    this.accumulator.move = 0;\r\n                    \r\n                    this.memoryPointer = Math.max(this.memoryPointer, 0);\r\n                    this.memoryPointer = Math.min(this.memoryPointer, Interpreter.memorySize - 1);\r\n                }\r\n\r\n                ++this.codePointer;\r\n                return;\r\n            case '+':\r\n            case '-':\r\n                this.accumulator.add += currentToken === '+' ? 1 : -1;\r\n\r\n                if (nextToken !== '+' && nextToken !== '-') {\r\n                    this.memory[this.memoryPointer] = (this.memory[this.memoryPointer] + this.accumulator.add) & 255;\r\n                    this.accumulator.add = 0;\r\n                }\r\n\r\n                ++this.codePointer;\r\n                return;\r\n            case ',':\r\n                this.memory[this.memoryPointer] = this.reader.read();\r\n                ++this.codePointer;\r\n                return;\r\n            case '.':\r\n                this.output += String.fromCharCode(this.memory[this.memoryPointer]);\r\n                ++this.codePointer;\r\n                return;\r\n            case '[':\r\n                this.loopStack.push(this.codePointer);\r\n                ++this.codePointer;\r\n                return;\r\n            case ']':\r\n                let newPointer = this.loopStack.pop() as number;\r\n                if (this.memory[this.memoryPointer] !== 0) {\r\n                    this.codePointer = newPointer;\r\n                } else {\r\n                    ++this.codePointer;\r\n                }\r\n                return;\r\n        }\r\n    }\r\n\r\n    public async run() {\r\n        while (this.codePointer < this.tokens.length && !this.halted) {\r\n            // a trick to avoid blocking\r\n            await new Promise<void>(resolve => {\r\n                setTimeout(() => {\r\n                    for (let i = 0; i < Interpreter.stepSize; ++i)\r\n                        this.step();\r\n\r\n                    resolve();\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this.halted) throw Error('cancelled');\r\n\r\n        return this.output;\r\n    }\r\n\r\n    public halt(): void {\r\n        this.halted = true;\r\n    }\r\n}\r\n","\nimport React, { useCallback, useRef, useState } from 'react';\nimport './App.css';\n\nimport ErrorMessage from './components/error message';\nimport Spinner from './components/spinner';\n\nimport Interpreter from './interpreter';\n\nconst App: React.FC = () => {\n\tconst [output, setOutput] = useState<{ text: string, error: boolean, time: number } | null>(null);\n\tconst [loading, setLoading] = useState<boolean>(false);\n\n\tconst loadingRef = useRef<boolean>(loading);\n\tloadingRef.current = loading;\n\n\tconst codeRef = useRef<HTMLTextAreaElement>(null),\n\t\tinputRef = useRef<HTMLTextAreaElement>(null);\n\n\tconst interpreterRef = useRef<Interpreter>();\n\n\tconst onClick: React.MouseEventHandler = useCallback(async () => {\n\t\tif (!codeRef.current || !inputRef.current) return;\n\n\t\tif (loadingRef.current) {\n\t\t\tinterpreterRef.current?.halt();\n\t\t\treturn;\n\t\t}\n\n\t\tsetLoading(true);\n\t\tsetOutput(null);\n\n\t\tconst code = codeRef.current.value,\n\t\t\tinput = inputRef.current.value;\n\n\t\ttry {\n\t\t\tconst interpreter = interpreterRef.current = new Interpreter(code, input);\n\n\t\t\tconst time = performance.now();\n\t\t\tinterpreter.run()\n\t\t\t\t.then(text => {\n\t\t\t\t\tsetOutput({\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\terror: false,\n\t\t\t\t\t\ttime: performance.now() - time\n\t\t\t\t\t});\n\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t})\n\t\t\t\t.catch((error: Error) => {\n\t\t\t\t\tsetOutput({\n\t\t\t\t\t\ttext: error.message,\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t\ttime: performance.now() - time\n\t\t\t\t\t});\n\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\tsetOutput({\n\t\t\t\ttext: (error as Error).message,\n\t\t\t\terror: true,\n\t\t\t\ttime: 0\n\t\t\t});\n\n\t\t\tsetLoading(false);\n\t\t}\n\t}, []);\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<header className=\"app-header\">\n\t\t\t\tBrainfuck interpreter\n\t\t\t</header>\n\t\t\t<div>\n\t\t\t\ta toy interpreter of <a href=\"https://en.wikipedia.org/wiki/Brainfuck\" target=\"_blank\">brainfuck</a>.\n\t\t\t</div>\n\t\t\t<hr />\n\n\t\t\t<div className=\"input\">\n\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t<label>code</label>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tdisabled={loading}\n\t\t\t\t\t\tref={codeRef}\n\t\t\t\t\t\trows={5}\n\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t<label>input</label>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tdisabled={loading}\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\trows={3}\n\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"action\">\n\t\t\t\t<button onClick={onClick}>{loading ? 'cancel' : 'run'}</button>\n\t\t\t</div>\n\n\t\t\t<hr />\n\t\t\t<div className=\"output\">\n\t\t\t\t{loading && <Spinner />}\n\t\t\t\t{output && <Output error={output.error} text={output.text} time={output.time} />}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\nconst Output: React.FC<{ error: boolean, text: string, time: number }> = props => {\n\treturn (<>\n\t\t<div>{props.error ? 'Error' : 'Output'}:</div>\n\t\t{props.error ? \n\t\t\t<ErrorMessage>{props.text}</ErrorMessage> :\n\t\t\t<span>{props.text}</span>\n\t\t}\n\t\t<div style={{ fontFamily: 'monospace' }}>time: {props.time} ms</div>\n\t</>);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}